const express = require('express');
const Vehicle = require('../models/Vehicle');
const VehicleData = require('../models/VehicleData');
const aiService = require('../services/aiService');
const mqttClient = require('../services/mqttClient');
const { auth } = require('../middleware/auth');

const router = express.Router();

// Get user vehicles 
router.get('/', auth, async (req, res) => {
  try {
    console.log(`üîç Getting vehicles for user: ${req.user._id}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–µ–≤–∞–π—Å—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü –ò–õ–ò –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
    // –£–ß–ò–¢–´–í–ê–ï–ú –ò –°–¢–ê–†–û–ï –ü–û–õ–ï userId –ò –ù–û–í–û–ï ownerId
    const vehicles = await Vehicle.find({
      $or: [
        { ownerId: req.user._id },
        { userId: req.user._id }, // –°–¢–ê–†–û–ï –ü–û–õ–ï –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
        { sharedWith: req.user._id }
      ]
    }).populate('ownerId', 'username email').populate('userId', 'username email');
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –¥–æ—Å—Ç—É–ø–∞
    const vehiclesWithAccess = await Promise.all(vehicles.map(async (vehicle) => {
      // –ú–ò–ì–†–ê–¶–ò–Ø: –µ—Å–ª–∏ –µ—Å—Ç—å userId –Ω–æ –Ω–µ—Ç ownerId
      if (vehicle.userId && !vehicle.ownerId) {
        console.log(`üîÑ Migrating vehicle ${vehicle.deviceId}: moving userId to ownerId`);
        vehicle.ownerId = vehicle.userId;
        vehicle.sharedWith = vehicle.sharedWith || [];
        await vehicle.save();
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å populate
        const updatedVehicle = await Vehicle.findById(vehicle._id)
          .populate('ownerId', 'username email');
        vehicle = updatedVehicle;
      }
      
      const ownerId = vehicle.ownerId || vehicle.userId;
      const accessType = ownerId && ownerId._id.toString() === req.user._id.toString() ? 'owner' : 'shared';
      
      return {
        ...vehicle.toObject(),
        accessType,
        ownerInfo: vehicle.ownerId || vehicle.userId
      };
    }));
    
    console.log(`‚úÖ Found ${vehicles.length} vehicles (owned + shared)`);
    res.json(vehiclesWithAccess);
  } catch (error) {
    console.error('‚ùå Error getting vehicles:', error);
    res.status(500).json({ message: error.message });
  }
});

// Add access to existing vehicle 
router.post('/add-access', auth, async (req, res) => {
  try {
    const { deviceId, ownerPassword } = req.body;
    console.log(`üîÑ Adding access to device: ${deviceId} for user: ${req.user._id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
    if (!deviceId || !ownerPassword) {
      console.log(`‚ùå Missing required fields:`, { deviceId: !!deviceId, ownerPassword: !!ownerPassword });
      return res.status(400).json({ 
        message: 'Device ID and owner password are required' 
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–µ–≤–∞–π—Å
    let vehicle = await Vehicle.findOne({ deviceId });
    if (!vehicle) {
      console.log(`‚ùå Device not found: ${deviceId}`);
      return res.status(404).json({ message: 'Device not found' });
    }
    
    console.log(`üîç Found vehicle:`, {
      id: vehicle._id,
      deviceId: vehicle.deviceId,
      ownerId: vehicle.ownerId,
      userId: vehicle.userId, // –°–¢–ê–†–û–ï –ü–û–õ–ï
      name: vehicle.name
    });
    
    // –ú–ò–ì–†–ê–¶–ò–Ø: –µ—Å–ª–∏ –µ—Å—Ç—å userId –Ω–æ –Ω–µ—Ç ownerId, –ø–µ—Ä–µ–Ω–æ—Å–∏–º
    if (vehicle.userId && !vehicle.ownerId) {
      console.log(`üîÑ Migrating vehicle: moving userId to ownerId`);
      vehicle.ownerId = vehicle.userId;
      vehicle.sharedWith = vehicle.sharedWith || [];
      await vehicle.save();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É vehicle –µ—Å—Ç—å ownerId
    if (!vehicle.ownerId) {
      console.log(`‚ùå Vehicle has no owner: ${deviceId}`);
      return res.status(500).json({ message: 'Vehicle has no owner assigned' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ req.user._id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!req.user || !req.user._id) {
      console.log(`‚ùå Invalid user session`);
      return res.status(401).json({ message: 'Invalid user session' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
    const ownerIdString = vehicle.ownerId.toString();
    const userIdString = req.user._id.toString();
    
    console.log(`üîç Checking access: owner=${ownerIdString}, user=${userIdString}`);
    
    if (ownerIdString === userIdString) {
      return res.status(400).json({ message: 'You are already the owner of this device' });
    }
    
    if (vehicle.sharedWith && vehicle.sharedWith.some(id => id.toString() === userIdString)) {
      return res.status(400).json({ message: 'You already have access to this device' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const bcrypt = require('bcryptjs');
    const User = require('../models/User');
    const owner = await User.findById(vehicle.ownerId);
    
    if (!owner) {
      console.log(`‚ùå Owner not found for device: ${deviceId}, ownerId: ${vehicle.ownerId}`);
      return res.status(404).json({ message: 'Device owner not found' });
    }
    
    console.log(`üîç Found owner: ${owner.username} (${owner._id})`);
    
    const isPasswordValid = await bcrypt.compare(ownerPassword, owner.password);
    
    if (!isPasswordValid) {
      console.log(`‚ùå Invalid owner password for device: ${deviceId}`);
      return res.status(400).json({ message: 'Invalid owner password' });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É —Å –¥–æ—Å—Ç—É–ø–æ–º
    if (!vehicle.sharedWith) {
      vehicle.sharedWith = [];
    }
    vehicle.sharedWith.push(req.user._id);
    await vehicle.save();
    
    console.log(`‚úÖ Access granted to device ${deviceId} for user: ${req.user._id}`);
    res.status(200).json({ 
      message: 'Access granted successfully',
      vehicle: {
        ...vehicle.toObject(),
        accessType: 'shared'
      }
    });
  } catch (error) {
    console.error('‚ùå Error adding device access:', error);
    console.error('‚ùå Stack trace:', error.stack);
    res.status(500).json({ 
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Server error'
    });
  }
});

// Register new vehicle (for original owner)
router.post('/register', auth, async (req, res) => {
  try {
    const { deviceId, name, model, year } = req.body;
    console.log(`üîÑ Registering NEW device: ${deviceId} for owner: ${req.user._id}`);
    
    if (!deviceId || !name) {
      return res.status(400).json({ 
        message: 'Device ID and name are required' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ deviceId –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    const existingVehicle = await Vehicle.findOne({ deviceId });
    if (existingVehicle) {
      console.log(`‚ùå Device ${deviceId} already registered`);
      return res.status(400).json({ message: 'Device ID already registered. Use "Add Access" instead.' });
    }
    
    const vehicle = new Vehicle({
      deviceId,
      ownerId: req.user._id, // –û–°–ù–û–í–ù–û–ô –í–õ–ê–î–ï–õ–ï–¶
      sharedWith: [], // –ü–£–°–¢–û–ô –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –î–û–°–¢–£–ü–û–ú
      name,
      model: model || 'Unknown',
      year: year || new Date().getFullYear()
    });
    
    await vehicle.save();
    console.log(`‚úÖ NEW device registered: ${vehicle._id}`);
    res.status(201).json({
      ...vehicle.toObject(),
      accessType: 'owner'
    });
  } catch (error) {
    console.error('‚ùå Error registering new device:', error);
    res.status(500).json({ message: error.message });
  }
});

// Get vehicle data 
router.get('/:deviceId/data', auth, async (req, res) => {
  try {
    const { deviceId } = req.params;
    const { limit = 50, hours = 24 } = req.query;
    
    console.log(`üîç Getting data for device: ${deviceId}`);
    console.log(`üìä Params - limit: ${limit}, hours: ${hours}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - —É—á–∏—Ç—ã–≤–∞–µ–º ownerId –ò sharedWith
    const vehicle = await Vehicle.findOne({ 
      deviceId: deviceId,
      $or: [
        { ownerId: req.user._id },
        { sharedWith: req.user._id }
      ]
    });
    
    if (!vehicle) {
      console.log(`‚ùå Vehicle not found or access denied: ${deviceId}`);
      return res.status(404).json({ message: 'Vehicle not found or access denied' });
    }
    
    console.log(`‚úÖ Vehicle found: ${vehicle.name} (${vehicle._id})`);
    
    const since = new Date(Date.now() - hours * 60 * 60 * 1000);
    console.log(`üìÖ Getting data since: ${since}`);
    
    const data = await VehicleData.find({
      deviceId: deviceId,
      timestamp: { $gte: since }
    })
    .sort({ timestamp: -1 })
    .limit(parseInt(limit));
    
    console.log(`‚úÖ Found ${data.length} records in time range for device: ${deviceId}`);
    res.json(data);
  } catch (error) {
    console.error('‚ùå Error getting vehicle data:', error);
    res.status(500).json({ message: error.message });
  }
});

// Send command to vehicle 
router.post('/:deviceId/command', auth, async (req, res) => {
  try {
    const { deviceId } = req.params;
    const { command } = req.body;
    
    console.log(`üéÆ Sending command: ${command} to device: ${deviceId}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    const vehicle = await Vehicle.findOne({ 
      deviceId: deviceId,
      $or: [
        { ownerId: req.user._id },
        { sharedWith: req.user._id }
      ]
    });
    
    if (!vehicle) {
      return res.status(404).json({ message: 'Vehicle not found or access denied' });
    }
    
    mqttClient.sendCommand(deviceId, command);
    console.log(`‚úÖ Command sent: ${command} to ${deviceId}`);
    res.json({ message: 'Command sent', command, deviceId });
  } catch (error) {
    console.error('‚ùå Error sending command:', error);
    res.status(500).json({ message: error.message });
  }
});

// Get AI recommendations 
router.get('/:deviceId/recommendations', auth, async (req, res) => {
  try {
    const { deviceId } = req.params;
    console.log(`ü§ñ Getting AI recommendations for: ${deviceId}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    const vehicle = await Vehicle.findOne({ 
      deviceId: deviceId,
      $or: [
        { ownerId: req.user._id },
        { sharedWith: req.user._id }
      ]
    });
    
    if (!vehicle) {
      return res.status(404).json({ message: 'Vehicle not found or access denied' });
    }
    
    const recommendations = await aiService.generateRecommendations(deviceId);
    console.log(`‚úÖ Generated ${recommendations.recommendations.length} recommendations`);
    res.json(recommendations);
  } catch (error) {
    console.error('‚ùå Error getting recommendations:', error);
    res.status(500).json({ message: error.message });
  }
});

// Dismiss alert
router.patch('/alerts/:alertId/dismiss', auth, async (req, res) => {
  try {
    const { alertId } = req.params;
    
    console.log(`üîÑ Dismissing alert: ${alertId} by user: ${req.user._id}`);
    
    const alert = await VehicleData.findById(alertId);
    
    if (!alert) {
      return res.status(404).json({ message: 'Alert not found' });
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    const vehicle = await Vehicle.findOne({ 
      deviceId: alert.deviceId,
      $or: [
        { ownerId: req.user._id },
        { sharedWith: req.user._id }
      ]
    });
    
    if (!vehicle) {
      return res.status(403).json({ message: 'Access denied to this alert' });
    }
    
    // Update alert to dismissed
    alert.dismissed = true;
    alert.dismissedAt = new Date();
    alert.dismissedBy = req.user._id;
    
    await alert.save();
    
    console.log(`‚úÖ Alert dismissed: ${alertId}`);
    res.json({ message: 'Alert dismissed successfully', alert });
  } catch (error) {
    console.error('‚ùå Error dismissing alert:', error);
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;