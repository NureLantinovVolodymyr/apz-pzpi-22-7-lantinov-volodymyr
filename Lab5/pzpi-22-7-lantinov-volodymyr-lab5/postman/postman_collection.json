{
  "info": {
    "name": "Vehicle Management System",
    "description": "API collection for vehicle monitoring and management system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001/api",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "deviceId",
      "value": "abc_683216ec7ed03d1d27f85281_20250531",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('token', response.token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Registration successful', () => {",
                  "        pm.expect(response.token).to.be.a('string');",
                  "        pm.expect(response.user.username).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Registration failed', () => {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('token', response.token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(response.token).to.be.a('string');",
                  "        pm.expect(response.user.email).to.equal('test@example.com');",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', () => {",
                  "        pm.expect(pm.response.code).to.equal(401);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.have.property('username');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          }
        }
      ]
    },
    {
      "name": "Vehicle Management",
      "item": [
        {
          "name": "Register Vehicle",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('vehicleId', response._id);",
                  "    pm.test('Vehicle registered successfully', () => {",
                  "        pm.expect(response.deviceId).to.equal(pm.collectionVariables.get('deviceId'));",
                  "        pm.expect(response.name).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Vehicle registration failed', () => {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"{{deviceId}}\",\n  \"name\": \"Test Vehicle\",\n  \"model\": \"ESP32 Simulator\",\n  \"year\": 2025\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/vehicles/register",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "register"]
            }
          }
        },
        {
          "name": "Get User Vehicles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Vehicles retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const vehicles = pm.response.json();",
                  "    pm.expect(vehicles).to.be.an('array');",
                  "    if (vehicles.length > 0) {",
                  "        pm.expect(vehicles[0]).to.have.property('deviceId');",
                  "        pm.expect(vehicles[0]).to.have.property('name');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/vehicles",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles"]
            }
          }
        },
        {
          "name": "Get Vehicle Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Vehicle data retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const data = pm.response.json();",
                  "    pm.expect(data).to.be.an('array');",
                  "    if (data.length > 0) {",
                  "        pm.expect(data[0]).to.have.property('deviceId');",
                  "        pm.expect(data[0]).to.have.property('timestamp');",
                  "        pm.expect(data[0].deviceId).to.equal(pm.collectionVariables.get('deviceId'));",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/vehicles/{{deviceId}}/data?limit=10&hours=24",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "{{deviceId}}", "data"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "hours",
                  "value": "24"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Vehicle Control",
      "item": [
        {
          "name": "Start Engine",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Engine start command sent', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.command).to.equal('start_engine');",
                  "    pm.expect(response.deviceId).to.equal(pm.collectionVariables.get('deviceId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"command\": \"start_engine\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/vehicles/{{deviceId}}/command",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "{{deviceId}}", "command"]
            }
          }
        },
        {
          "name": "Stop Engine",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Engine stop command sent', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.command).to.equal('stop_engine');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"command\": \"stop_engine\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/vehicles/{{deviceId}}/command",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "{{deviceId}}", "command"]
            }
          }
        },
        {
          "name": "Enable Emergency",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Emergency enable command sent', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.command).to.equal('emergency_on');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"command\": \"emergency_on\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/vehicles/{{deviceId}}/command",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "{{deviceId}}", "command"]
            }
          }
        },
        {
          "name": "Disable Emergency",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Emergency disable command sent', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.command).to.equal('emergency_off');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"command\": \"emergency_off\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/vehicles/{{deviceId}}/command",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "{{deviceId}}", "command"]
            }
          }
        }
      ]
    },
    {
      "name": "AI & Analytics",
      "item": [
        {
          "name": "Get AI Recommendations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('AI recommendations retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('recommendations');",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "    if (response.analysis) {",
                  "        pm.expect(response.analysis).to.have.property('totalRecords');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/vehicles/{{deviceId}}/recommendations",
              "host": ["{{baseUrl}}"],
              "path": ["vehicles", "{{deviceId}}", "recommendations"]
            }
          }
        },
        {
          "name": "Get Dashboard Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Dashboard analytics retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('alerts');",
                  "    pm.expect(response).to.have.property('vehicles');",
                  "    pm.expect(response.alerts).to.be.an('array');",
                  "    pm.expect(response.vehicles).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "dashboard"]
            }
          }
        }
      ]
    },
    {
      "name": "Admin Only",
      "item": [
        {
          "name": "Create Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.token);",
                  "    pm.test('Admin user created', () => {",
                  "        pm.expect(response.user.role).to.equal('admin');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Get Admin Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin analytics retrieved', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('totalVehicles');",
                  "        pm.expect(response).to.have.property('activeVehicles');",
                  "        pm.expect(response).to.have.property('totalAlerts');",
                  "    } else if (pm.response.code === 403) {",
                  "        pm.expect(pm.response.text()).to.include('Admin access required');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/admin",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "admin"]
            }
          }
        }
      ]
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Server Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Server is healthy', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('Server running');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:3001/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "3001",
              "path": ["health"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set base URL if not configured",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "    pm.collectionVariables.set('baseUrl', 'http://localhost:3001/api');",
          "}",
          "",
          "// Auto-set device ID if not configured",
          "if (!pm.collectionVariables.get('deviceId')) {",
          "    pm.collectionVariables.set('deviceId', 'abc_683216ec7ed03d1d27f85281_20250531');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for response time",
          "pm.test('Response time is reasonable', () => {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Global test for content type on successful responses",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    pm.test('Content-Type is JSON', () => {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ]
}