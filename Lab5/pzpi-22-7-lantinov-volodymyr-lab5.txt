Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №5
З дисципліни «Архітектура програмного забезпечення» на тему: «РОЗГОРТАННЯ СИСТЕМИ»

Виконавець:
ст. гр. ПЗПІ-22-7							Лантінов Володимир.

Перевірив:
ст. викладач каф. ПІ						Сокорчук І. П.



















Харків 2025
 
1	ІСТОРІЯ ЗМІН


№	Дата	Версія звіту	Опис	змін	та
виправлень
1	26.05.2025	0.1	Створено структуру звіту. Визначено завдання	на
лабораторну роботу
2	28.05.2025	0.1	Описано хід роботи, додаток А, додаток Б, додаток В. Сформульовано
висновок роботи

2	ЗАВДАННЯ

Метою даного лабораторного заняття є розгортання програмної системи.

3	ОПИС ВИКОНАНОЇ РОБОТИ


До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А.
Усі графічні матеріали наведені у додатку Б.
У процесі виконання завдання було реалізовано комплексне розгортання системи моніторингу транспортних засобів з використанням хмарної платформи Railway.
Розгортання здійснювалося поетапно у наступній послідовності:
Перший етап включав налаштування та розгортання backend-сервера на базі Node.js та Express.js, який забезпечує централізовану обробку HTTP-запитів, управління базою даних MongoDB Atlas, інтеграцію з MQTT брокером для обробки телеметричних даних та взаємодію з AI-сервісом Google Gemini для генерації аналітичних рекомендацій.
Другий етап передбачав розгортання frontend-додатка, що функціонує як користувацький інтерфейс системи та забезпечує інтерактивну взаємодію адміністраторів і операторів з платформою моніторингу в режимі реального часу, включаючи відображення телеметричних даних, аналітичних звітів та системних сповіщень.
Третій етап завершувався інтеграцією IoT-компонента, який відповідає за автоматизований збір телеметричних даних з бортових систем транспортних засобів, їх передачу через MQTT-протокол до центрального сервера та первинну обробку інформації на рівні пристроїв, що забезпечує повноцінну інтеграцію фізичних об'єктів у загальну цифрову екосистему системи моніторингу.
Деякий код застосунку наведено у додатку В.

ПРОЦЕС РОЗГОРТАННЯ
3.1 Вибір платформи хостингу
Розглянуті варіанти:
1.	Vercel 
o	Serverless архітектура
o	Не підтримує постійні MQTT з'єднання
o	Обмеження по часу виконання функцій
2.	Railway 
o	Підтримка Node.js додатків
o	Постійні з'єднання
o	Простота конфігурації
o	Інтеграція з Git
3.	Heroku 
o	Класичний вибір
o	Платний після безкоштовного періоду
4.	Render 
o	Хороша альтернатива
o	Безкоштовний план

Команди розгортання
# 1. Встановлення Railway CLI 
npm install -g @railway/cli 
# 2. Ініціалізація проекту 
railway init 
# 3. Налаштування змінних середовища 
railway variables --set "MONGODB_URI=mongodb+srv://..." 
railway variables --set "JWT_SECRET=..." 
railway variables --set "GEMINI_API_KEY=..." 
railway variables --set "MQTT_BROKER=broker.hivemq.com" 
# 4. Розгортання 
railway up 
# 5. Перевірка статусу 
railway status 
railway logs

ПРОБЛЕМИ ТА РІШЕННЯ
1 Проблема з командами Railway CLI
Проблема:
error: unexpected argument 'set' found
Usage: railway.exe variables [OPTIONS]
Причина: Неправильний синтаксис команди
Рішення:
# Неправильно:
railway variables set KEY="value"
# Правильно:
railway variables --set "KEY=value"
2 Проблема з відсутністю змінних середовища
Проблема:
MQTT_BROKER: undefined
Database connection error: The `uri` parameter must be a string, got "undefined"
Причина: Змінні середовища не були встановлені або не застосувалися
Рішення:
1.	Встановити змінні через CLI або веб-інтерфейс
2.	Перезапустити деплой після встановлення
3.	Перевірити через railway variables

Доступні команди для моніторингу:
# Перегляд логів
railway logs
# Статус сервісу
railway status
# Метрики використання
railway metrics
# Доступ до домену
railway domain

ВИСНОВКИ

У результаті виконання лабораторної роботи було успішно реалізовано розгортання усіх ключових компонентів системи: серверної частини, веб-клієнта та IoT-модуля. Це дозволило забезпечити коректну взаємодію між елементами системи та їх інтеграцію в єдину інфраструктуру. Отримані результати підтверджують працездатність розробленого рішення та доцільність обраного підходу.
Public URL: https://spectacular-birds-production.up.railway.app/ 

 
Рисунок 1 – Успiшний деплой

 
ДОДАТОК А
Відеозапис

Відеозапис	презентації	результатів	лабораторної	роботи:


Хронологічний опис відеозапису:

 
ДОДАТОК Б
Графічні матеріали



 
Рисунок Б.1 — Загальна архітектура

 
Рисунок Б.2 — Етапи розгортання
 
 
Рисунок Б.3 — Налаштування безпеки

 
Рисунок Б.4 - Діаграма вирішення проблем 
ДОДАТОК В
Програмний код


В.1 railway.json.
GitHub репозиторій: 
{
  "build": {
    "builder": "nixpacks"
  },
  "deploy": {
    "startCommand": "npm start",
    "healthcheckPath": "/health",
    "healthcheckTimeout": 300,
    "restartPolicyType": "always"
  }
}

В.2 .railwayignore.
GitHub репозиторій: 
node_modules/
.env
.env.local
.git/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Development files
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
