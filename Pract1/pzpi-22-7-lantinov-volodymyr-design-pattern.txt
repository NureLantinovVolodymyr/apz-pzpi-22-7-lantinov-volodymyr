Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
 






Практична робота №1
з дисципліни: «Архітектура програмного забезпечення»
 





 
Виконав: 								Перевірив:
ст. гр. ПЗПІ-22-7							Ст. в. Сокорчук І. П. 
Лантінов Володимир

                                                					




Харків 2025

1 ПАТЕРНИ ПРОЄКТУВАННЯ
1.1 Історія змін


	Зміни в документі нотуються до таблиці 1.1.	

Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	17.03.25	0.1	Створено базову структуру звіту, додано титульну сторінку та розділ «Історія змін»
2	17.03.25	0.2	Створено розділ «Завдання до практичної роботи»
3	17.03.25	0.3	Запроваджено опис патерну Memento та його роль у програмуванні.
4		0.4	Додано нові підрозділи для поглибленого аналізу компонентів патерну
5	17.03.25	0.5	Створено розділ «Висновки»
7	17.03.25	0.7	Додано додаток A зі слайдами презентації

 
1.2 Завдання до практичної роботи


Завдання практичної роботи полягає у вивченні патерну проєктування «Memento» та його принципів використання в об'єктно-орієнтованому програмуванні. Необхідно дослідити, як цей патерн забезпечує збереження та відновлення внутрішнього стану об'єктів без порушення інкапсуляції, що сприяє реалізації функціоналу «відміни» та збереженню історії змін. У рамках роботи потрібно створити власний приклад застосування патерну Memento, наприклад, для можливості повернення об'єкта до попереднього стану після виконання певних операцій. Також слід продемонструвати практичне використання цього патерну та пояснити його переваги порівняно з іншими методами управління станами об'єктів.

1.3 Опис виконаної роботи

На основі наданого документа я переформулюю текст, зберігаючи його суть, структуру та ключові ідеї, але з новим формулюванням, щоб уникнути прямого копіювання. Нижче наведено переписаний текст:
________________________________________
Патерн «Memento» є важливим інструментом у сфері об'єктно-орієнтованого програмування, який забезпечує збереження та відновлення внутрішнього стану об’єктів без порушення їхньої інкапсуляції. Цей підхід дозволяє розробникам реалізовувати функціонал «скасування» (undo) або підтримки історії змін, що відіграє ключову роль у забезпеченні надійності та гнучкості складних програмних систем.
Уявіть програмне забезпечення, яке обробляє великі обсяги даних або взаємодіє з численними об’єктами, де будь-яка помилка може призвести до втрати даних чи небажаних змін. Патерн «Memento» вирішує цю проблему, дозволяючи створювати «знімки» стану об’єкта в певний момент часу та зберігати їх для подальшого відновлення. Це забезпечує можливість повернення до попереднього стабільного стану системи у разі помилок, підвищуючи її стійкість і знижуючи ризик втрати даних.
Практичне застосування патерну «Memento» охоплює численні сценарії в різних областях програмування. Наприклад, він широко використовується для реалізації функції «скасування» дій користувача в текстових і графічних редакторах, програмах обробки даних або системах управління транзакціями. У цих випадках патерн дозволяє зберігати стан об’єкта перед виконанням операції, щоб користувач міг повернутися до нього, якщо зміни виявилися небажаними або спричинили помилки.
Ще одним важливим аспектом є підтримка історії змін. Патерн «Memento» дозволяє зберігати послідовність станів об’єкта, що корисно у фінансових системах для ведення історії транзакцій або в системах контролю версій для документування змін. Такий підхід полегшує аналіз роботи програми, аудит операцій і виявлення причин можливих збоїв.
Патерн також ефективний у системах відновлення після аварій. У програмах, що працюють у режимі 24/7 або під високим навантаженням, наприклад, серверних додатках чи базах даних, збереження стану забезпечує швидке відновлення системи після критичних збоїв без втрати даних чи необхідності повторної ініціалізації.
У контексті інтерактивних додатків, таких як веб- або мобільні застосунки, патерн «Memento» дозволяє реалізувати автоматичне збереження даних, введених користувачем, щоб запобігти їх втраті у разі збоїв. Це покращує користувацький досвід і підвищує надійність програмного продукту.
У ігровій індустрії патерн застосовується для збереження прогресу гри. Гравці можуть зберігати поточний стан і повертатися до нього у разі невдачі чи бажання змінити стратегію, що робить ігровий процес більш гнучким і комфортним.
Крім того, патерн «Memento» корисний у системах моделювання та симуляцій, де потрібно зберігати різні ітерації стану для аналізу впливу змін параметрів. Наприклад, у наукових дослідженнях, що використовують комп’ютерне моделювання, збереження попередніх станів дозволяє дослідникам повертатися до них для детального вивчення.
Основна перевага патерну полягає в його здатності зберігати інкапсуляцію об’єкта. Тільки «Originator» (об’єкт, чий стан зберігається) має доступ до даних «Memento», що запобігає несанкціонованим змінам і забезпечує цілісність внутрішньої логіки об’єкта. Це сприяє чистоті архітектури програмного забезпечення та зменшує ризик помилок.
Однак використання патерну «Memento» може супроводжуватися певними недоліками, зокрема значними витратами пам’яті при збереженні великої кількості станів. Для складних об’єктів із великими даними це може впливати на продуктивність. Проте ці витрати часто виправдовуються підвищенням надійності та зручності роботи системи. Оптимізація, наприклад, збереження лише ключових станів або видалення застарілих знімків, може зменшити ці недоліки.
Порівняно з іншими патернами, такими як «Command», «State» або «Iterator», «Memento» унікальний своєю спрямованістю на збереження та відновлення стану. Наприклад, «Command» інкапсулює дії, які можна скасувати, тоді як «Memento» зосереджується на збереженні стану для відновлення. Часто ці патерни комбінуються для реалізації складних функцій, таких як багаторівневе скасування.
У підсумку, патерн «Memento» є потужним інструментом для управління станом об’єктів, який забезпечує інкапсуляцію, гнучкість і надійність. Його застосування охоплює широкий спектр сценаріїв – від користувацьких інтерфейсів і ігор до критичних систем управління даними та наукових симуляцій. Незважаючи на можливі витрати ресурсів, переваги патерну, такі як підтримка скасування дій, збереження історії змін і відновлення після збоїв, роблять його незамінним у сучасних програмних проєктах. Використання «Memento» особливо доцільне, коли потрібно забезпечити повернення до попередніх станів, гарантувати цілісність даних і підвищити адаптивність системи до змін.

1.4 Висновки

Патерн «Memento» є ефективним інструментом, який забезпечує збереження та відновлення стану об’єктів, зберігаючи при цьому принципи інкапсуляції. Він значно полегшує впровадження функції «скасування» (undo) та ведення історії змін, що сприяє підвищенню стабільності й надійності програмних систем. Цей підхід дозволяє уникнути складних ієрархій класів, характерних для традиційних методів управління станами, що допомагає підтримувати чистоту й прозорість архітектури програмного забезпечення.
Водночас використання патерну «Memento» потребує ретельного планування та оптимізації, оскільки збереження численних знімків стану може збільшувати споживання оперативної пам’яті та ускладнювати управління ресурсами. Проте, попри ці виклики, патерн значно підвищує гнучкість системи, забезпечує безпеку даних і створює ефективний механізм для відновлення попередніх станів об’єктів.
Загалом, патерн «Memento» відіграє ключову роль у сучасній розробці програмного забезпечення, сприяючи підвищенню якості, зручності та стійкості додатків, що є особливо важливим для систем із високою динамікою змін.
.
 
Додаток А
Слайди презентації доповіді


 
Рисунок А.1 – Титульний слайд

 
Рисунок А.2 – Вступ
 
	Рисунок А.3 – Призначення

 
Рисунок А.4 – Компоненти
 
Рисунок А.5 – Переваги 

 
Рисунок А.6 – Сценарії Memento
 
	Рисунок А.7 – Порівняння з Іншими Патернами

 
Рисунок А.8 – Рекомендації


 
Рисунок А.9 – Висновки

