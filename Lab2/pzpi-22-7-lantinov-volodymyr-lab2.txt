Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №2
З дисципліни «Архітектура програмного забезпечення» на тему: «РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ СИСТЕМИ »

Виконавець:
ст. гр. ПЗПІ-22-7							Лантінов Володимир.

Перевірив:
ст. викладач каф. ПІ						Сокорчук І. П.

















Харків 2025
 



1	ІСТОРІЯ ЗМІН


№	Дата	Версія звіту	Опис	змін	та
виправлень
1	01.05.2025	0.1	Створено	розділ
«Завдання»
2	02.05.2025	0.1	Створено	розділ
«Опис	виконаної роботи»
3	03.05.2025	0.1	Наповнено	додатки
А та Б
4	03.05.2025	0.1	Підбито	висновки
роботи
5	03.05.2025	0.1	Заповнено додаток В
з програмним кодом

2	ЗАВДАННЯ

Метою даного лабораторного заняття є втілення функцій бізнес логіки та функцій адміністрування системи.

3	ОПИС ВИКОНАНОЇ РОБОТИ

До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А.
У межах виконання проєкту було реалізовано програмну систему, орієнтовану на зручний та швидкий процес мониторингу транспортних засобів. Основною функціональністю стала можливість пошуку, підключення та мониторингу транспортних засобів, перегляд аналітики телеметричних даних з AI рекомендаціями.
Крім функціонального модуля, у систему було інтегровано механізм сповіщень та алертів, який інформує користувача про критичні ситуації (перегрів двигуна, низький рівень палива), а також успішне підключення до мониторингу. Це забезпечує оперативну реакцію від користувача, наприклад він зможе вчасно зупинити двигун або звернутися до сервісу.
Також було реалізовано адміністративний функціонал, що включає можливість керування користувачами (блокування та розблокування), а також резервне копіювання бази даних MongoDB з телеметричними даними. Це підвищує контроль над безпекою системи, та дає можливість блокувати зловмисників.
Окремо створено ролі користувачів і різний доступ для кожної ролі, наприклад адмін зможе блокувати користувачів, власник ТЗ надавати доступ до мониторингу своїх транспортних засобів, а користувач з наданим доступом зможе моніторити ТЗ та отримувати AI рекомендації по обслуговуванню.

ВИСНОВКИ

У результаті виконання даного проекту було реалізовано ключові елементи бізнес-логіки програмної системи мониторингу транспортних засобів з використанням математичних методів аналізу телеметричних даних та AI алгоритмів для генерації рекомендацій. Окрім цього, було впроваджено функціонал багаторівневої системи алертів та сповіщення користувачів про критичні стани транспортних засобів, а також реалізовано повноцінні можливості адміністрування системи з управлінням ролями користувачів та доступом до транспортних засобів.
 



ДОДАТОК А
Відеозапис

Відеозапис	презентації	результатів	лабораторної	роботи:
https://youtu.be/fXvlOHCwtf0 


Хронологічний опис відеозапису: 

 



ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – UML Діаграма прецедентів
 
 
Рисунок Б.2 – ER діаграма бази даних

 
Рисунок Б.3 – Діаграма структури бази даних
 







  
Рисунок Б.4 – Діаграма діяльності для підключення ТЗ
 

 

Рисунок Б.5– Діаграма діяльності для аналітики по складу
 

ДОДАТОК В
Програмний код


В.1 Математична обробка даних. Код файлу з розрахунком статистики по складу
Github Репозиторій: 

const express = require('express');
const Alert = require('../models/Alert'); // НОВЫЙ ИМПОРТ
const Vehicle = require('../models/Vehicle');
const VehicleData = require('../models/VehicleData');
const { auth, adminAuth } = require('../middleware/auth');

const router = express.Router();

// Get analytics dashboard data - ОБНОВЛЕННЫЙ
router.get('/dashboard', auth, async (req, res) => {
  try {
    const userVehicles = await Vehicle.find({
      $or: [
        { ownerId: req.user._id },
        { sharedWith: req.user._id }
      ]
    });
    
    const deviceIds = userVehicles.map(v => v.deviceId);
    
    // Recent alerts from Alert model - ИСПОЛЬЗУЕМ НОВУЮ МОДЕЛЬ
    const alerts = await Alert.find({
      deviceId: { $in: deviceIds },
      dismissed: false,
      timestamp: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
    }).sort({ timestamp: -1 }).limit(10);

    // Vehicle status summary with latest data
    const summary = await Promise.all(
      userVehicles.map(async (vehicle) => {
        const latestData = await VehicleData.findOne({ deviceId: vehicle.deviceId })
          .sort({ timestamp: -1 });
        
        return {
          ...vehicle.toObject(),
          latestData
        };
      })
    );

    console.log(`📊 Dashboard: Found ${alerts.length} active alerts for user`);
    res.json({ alerts, vehicles: summary });
  } catch (error) {
    console.error('❌ Error getting dashboard analytics:', error);
    res.status(500).json({ message: error.message });
  }
});

// Admin analytics - ОБНОВЛЕННЫЙ
router.get('/admin', auth, adminAuth, async (req, res) => {
  try {
    const totalVehicles = await Vehicle.countDocuments();
    const activeVehicles = await Vehicle.countDocuments({
      lastSeen: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    // Total alerts from Alert model - ИСПОЛЬЗУЕМ НОВУЮ МОДЕЛЬ
    const totalAlerts = await Alert.countDocuments({
      timestamp: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }
    });

    const criticalAlerts = await Alert.countDocuments({
      severity: 'CRITICAL',
      dismissed: false,
      timestamp: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });

    res.json({ 
      totalVehicles, 
      activeVehicles, 
      totalAlerts, 
      criticalAlerts 
    });
  } catch (error) {
    console.error('❌ Error getting admin analytics:', error);
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;



