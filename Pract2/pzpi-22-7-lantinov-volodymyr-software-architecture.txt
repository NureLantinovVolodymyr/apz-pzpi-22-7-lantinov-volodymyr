Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
 






Практична робота №2
з дисципліни: «Архітектура програмного забезпечення»
 





 
Виконав: 								Перевірив:
ст. гр. ПЗПІ-22-7							Ст. в. Сокорчук І. П. 
Лантінов Володимир

                                                					




Харків 2025

1 Архітектура відомих програмних систем
1.1 Історія змін

	Зміни в документі нотуються до таблиці 1.1.	

Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	18.03.25	0.1	Створено базову структуру звіту про платформу Discord, додано титульну сторінку та розділ «Історія змін».
2	18.03.25	0.2	Створено розділ «Завдання до практичної роботи», оновлено опис завдання для дослідження архітектури Discord.
3	18.03.25	0.3	Розроблено детальний опис архітектури Discord.
4	18.03.25	0.4	Додано розділ «Опис виконаної роботи» 
5	18.03.25	0.5	Створено розділ «Висновки» з підсумками дослідження та перспективами розвитку платформи
7	18.03.25	0.7	Додано додаток A зі слайдами презентації
 
1.2 Завдання до практичної роботи


Завдання до практичної роботи полягає в ознайомленні з архітектурою платформи Discord – сучасного рішення для організації текстового, голосового та відеозв’язку в реальному часі. Необхідно дослідити, як система забезпечує високу продуктивність, масштабованість і безпеку завдяки використанню ключових компонентів: шлюзу WebSocket, мікросервісної архітектури, системи маршрутизації повідомлень, розподілених баз даних, механізмів кешування, а також систем моніторингу та логування.
У межах роботи слід реалізувати власний приклад застосування платформи Discord, що демонструє створення бота для автоматизації взаємодії в текстових каналах або обробки голосових команд. При цьому потрібно детально описати етапи створення бота, його конфігурації, обробки запитів через API Discord, а також пояснити, як система оптимізує продуктивність для забезпечення швидкого та надійного обміну даними.
Особливу увагу слід приділити аналізу переваг платформи Discord порівняно з іншими комунікаційними сервісами – зокрема, гнучкості налаштування серверів, підтримці великих спільнот і можливостям інтеграції з зовнішніми інструментами. Практична робота має також містити розгляд можливих викликів, пов’язаних із масштабуванням системи для обробки мільйонів одночасних користувачів, інтеграцією з іншими платформами, а також перспектив подальшого розвитку Discord у контексті сучасних технологічних трендів.

1.3 Опис виконаної роботи

У рамках виконання практичної роботи було проведено детальний аналіз та впровадження архітектури платформи Discord – сучасного рішення для організації текстового, голосового та відеозв’язку в реальному часі. Основною метою дослідження стало вивчення принципів роботи системи, її структурної організації та практичних аспектів застосування в умовах масштабованої платформи, що забезпечує високу продуктивність, безпеку даних і низьку затримку для мільйонів користувачів.
На початковому етапі роботи було здійснено огляд сучасних комунікаційних платформ, з акцентом на порівняння Discord з іншими рішеннями. Було встановлено, що Discord вирізняється своєю здатністю підтримувати великі спільноти, забезпечувати миттєвий обмін повідомленнями та голосовий зв’язок із мінімальною затримкою, а також надавати гнучкі можливості для інтеграції з зовнішніми інструментами. Цей підхід особливо цінний для геймерів, розробників і спільнот, де швидкість, надійність і кастомізація відіграють ключову роль.
Одним із центральних компонентів платформи є шлюз WebSocket, який виступає точкою входу для всіх клієнтських запитів. Цей шлюз забезпечує аутентифікацію, маршрутизацію повідомлень і підтримку реального часу зв’язку між клієнтами та серверами. Завдяки використанню WebSocket, Discord досягає низької затримки при передачі текстових і голосових даних, а також оптимізує розподіл навантаження між мікросервісами, що сприяє високій масштабованості системи.
Мікросервісна архітектура є основою платформи Discord. Кожна функціональність, як-от чат, голосовий зв’язок чи автентифікація, реалізована як окремий незалежний сервіс. Це дозволяє гнучко масштабувати окремі компоненти, швидко впроваджувати нові функції та забезпечувати відмовостійкість. Наприклад, збій в одному сервісі не впливає на роботу інших, що гарантує стабільність платформи навіть при пікових навантаженнях.
Особлива увага приділялася голосовому зв’язку, який є ключовою особливістю Discord. Голосовий трафік обробляється за допомогою кодека Opus для стиснення аудіо та бібліотеки libsodium для шифрування, що забезпечує безпеку та якість передачі даних. Голосові сервери, розподілені по всьому світу, дозволяють підключати користувачів до найближчого сервера, мінімізуючи затримки та забезпечуючи плавний голосовий досвід навіть при великій кількості одночасних учасників.
Система баз даних Discord використовує гібридний підхід для обробки великих обсягів даних. Cassandra застосовується для зберігання неструктурованих даних, таких як повідомлення, завдяки своїй високій масштабованості та доступності. PostgreSQL використовується для структурованих даних, таких як інформація про сервери та користувачів. Redis забезпечує швидкий доступ до кешованих даних і сесій, що зменшує навантаження на бази даних і підвищує продуктивність системи.
Для моніторингу та забезпечення стабільної роботи платформи впроваджено систему логування та збору метрик. Цей модуль дозволяє в реальному часі відстежувати ключові показники, такі як час відповіді, використання ресурсів і кількість активних користувачів. Аналіз метрик допомагає виявляти потенційні проблеми, оптимізувати продуктивність і оперативно реагувати на збої, що є критично важливим для підтримки високової платформи.
Клієнтські додатки Discord включають веб-версію на базі React.js, мобільні додатки на React Native для iOS і Android, а також настільні клієнти на Electron для Windows, macOS і Linux. Крім того, нативний Game Overlay, написаний на C++, забезпечує інтеграцію з іграми, дозволяючи користувачам взаємодіяти з платформою без переривання ігрового процесу. Ці технології забезпечують кросплатформність і зручний доступ до функціоналу Discord.
Практична частина роботи включала створення простого бота для Discord, який демонструє автоматизацію взаємодії в текстових каналах. Було описано етапи створення бота, його конфігурацію через Discord API, обробку запитів і відправлення відповідей. Тестування бота під різними навантаженнями дозволило оцінити продуктивність системи та виявити потенційні вузькі місця, такі як обмеження API або затримки при обробці великих обсягів повідомлень.
Особлива увага приділялася безпеці та захисту даних. Discord використовує шифрування для голосового та текстового трафіку, а також механізми аутентифікації й авторизації для захисту облікових записів користувачів. Це забезпечує високий рівень конфіденційності, що є однією з ключових переваг платформи порівняно з іншими комунікаційними сервісами.
Підсумовуючи, платформа Discord демонструє високу ефективність, масштабованість і гнучкість завдяки мікросервісній архітектурі, оптимізованому стеку технологій і розподіленій інфраструктурі. Реалізація таких компонентів, як шлюз WebSocket, голосові сервери, гібридні бази даних, система моніторингу та клієнтські додатки, дозволяє створювати надійне рішення для спілкування та взаємодії в реальному часі. Проведене тестування підтвердило потенціал платформи для обробки мільйонів одночасних користувачів і її готовність до інтеграції з новими технологіями, що відкриває перспективи для подальшого розвитку в сфері онлайн-комунікацій.

1.4 Висновки

Платформа Discord є прикладом сучасної, масштабованої та відмовостійкої системи. Завдяки мікросервісній архітектурі, оптимізованим технологіям і розподіленій інфраструктурі, вона забезпечує надійний зв’язок для мільйонів користувачів. Тестування бота та аналіз системи підтвердили її потенціал для подальшого розвитку та інтеграції з новими технологіями.
  
Додаток А
Слайди презентації доповіді

 
Рисунок А.1 – Титульний слайд

 
Рисунок А.2 – Вступ
 
	Рисунок А.3 – Мікросервісна Архітектура

 
Рисунок А.4 – Стек Технологій Backend
 
Рисунок А.5 – Бази Даних

 
Рисунок А.6 – Голосовий Зв'язок
 
	Рисунок А.7 – Клієнтські Додатки та Технології

 
Рисунок А.8 – Інфраструктура
 
Рисунок А.9 – Висновок

